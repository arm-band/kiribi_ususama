<%
//ファイル名を各ページのidとして設定する
funcFileNameId = (filename, fnProcedure) => {
    let id = '';
    const regex = /^[\d]+$/ig;
    id = fnProcedure[1].slice(fnProcedure[1].lastIndexOf(fnProcedure[0]) + 1).replace(/\.ejs/g, ''); //PC内の絶対パスで最後の\の位置+1(=パスなしファイル名)から末尾までの文字列を切り取り、'.ejs'の4文字を取り除く=拡張子なしのファイル名
    if(regex.test(id)) {
        //idが数字のみの場合はプレフィックスとして`num`を付与
        id = 'num' + id;
    }
    return id;
};
//ファイル名からパスの深さを測り、その値に応じた相対パスを返す
funcFileNamePath = (filename, fnProcedure, id) => {
    let path = '';
    let depth = 0;
    //news.ejsとarticle.ejsとsitemap.ejsだけは固定割り振りする
    //news.ejs: 1
    //article.ejs: 2
    //sitemap.ejs: 0
    switch(id) {
        case 'sitemap':
            depth = 0;
            break;
        case 'sitesearch':
            depth = 0;
            break;
        case 'news':
            depth = 1;
            break;
        case 'article':
            depth = 2;
            break;
        default:
            depth = fnProcedure[1].split(`src${fnProcedure[0]}ejs`)[1].split(fnProcedure[0]).length - 2;
            break;
    }
    //相対パスを生成
    if(depth > 0) {
        path = '../'.repeat(depth);
    }
    else {
        path = './';
    }
    return path;
};
//ファイル名からナビゲーションバーのパスを返す
funcNavPath = (relPath, id) => {
    let navPath = relPath;
    if(id === 'index') {
        navPath = '';
    }
    return navPath;
};
//ファイル名を各ページのidとして設定する
funcFileNameProcedure = (filename) => {
    let array = [];
    array.push('/');
    array.push(filename.replace(/\\/g, '/'));
    return array;
};
-%>